return {
  "d0nkarnag3/lspcontainers.nvim",
  dependencies = {
    "neovim/nvim-lspconfig"
  },
  config = function()
    local lua_settings = {
      Lua = {
        runtime = {
          -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)
          version = 'LuaJIT',
          -- Setup your lua path
          path = vim.split(package.path, ';'),
        },

        diagnostics = {
          -- Get the language server to recognize the `vim` global
          globals = { 'vim' },
        },
        workspace = {
          -- Make the server aware of Neovim runtime files
          library = {
            [vim.fn.expand('$VIMRUNTIME/lua')] = true,
            [vim.fn.expand('$VIMRUNTIME/lua/vim/lsp')] = true,
          },
        },
        -- Do not send telemetry data containing a randomized but unique identifier
        telemetry = {
          enable = false,
        },
      },
    }


    local function setup(config, server)
      local lspcontainers = require'lspcontainers'
      local util = require'lspconfig/util'
      local container_runtime = {
        container_runtime = "podman"
      }

      if server == "bashls" then
        config.before_init = function(params)
          params.processId = vim.NIL
        end

        config.cmd = lspcontainers.command(server, container_runtime)
        config.root_dir = util.root_pattern(".git", vim.fn.getcwd())
      end

      if server == "dockerls" then
        config.before_init = function(params)
          params.processId = vim.NIL

        end

        config.cmd = lspcontainers.command(server, container_runtime)
        config.root_dir = util.root_pattern(".git", vim.fn.getcwd())
      end

      if server == "gopls" then
        config.cmd = lspcontainers.command(server, container_runtime)
      end

      if server == "html" then
        config.cmd = lspcontainers.command(server, container_runtime)
      end

      if server == "pylsp" then
        config.cmd = lspcontainers.command(server, container_runtime)
      end

      if server == "lua_ls" then
        config.cmd = lspcontainers.command(server, container_runtime)
        config.settings = lua_settings
      end

      if server == "tsserver" then
        config.before_init = function(params)
          params.processId = vim.NIL
        end


        config.cmd = lspcontainers.command(server, container_runtime)
        config.root_dir = util.root_pattern(".git", vim.fn.getcwd())
      end

      if server == "yamlls" then
        config.before_init = function(params)
          params.processId = vim.NIL
        end

        config.cmd = lspcontainers.command(server, container_runtime)

        config.root_dir = util.root_pattern(".git", vim.fn.getcwd())
      end

      if server == "omnisharp" then
        config.before_init = function(params)
          params.processId = vim.NIL
        end

        config.cmd = lspcontainers.command(server, container_runtime)
        config.root_dir = util.root_pattern("*.csproj", "*.sln", vim.fn.getcwd())
        config.filetypes = { "cs", "vb" }
      end

      if server == "rust_analyzer" then
        config.cmd = lspcontainers.command(server, container_runtime)
        config.root_dir = util.root_pattern(".git", vim.fn.getcwd())

        vim.api.nvim_exec([[
          autocmd CursorMoved,InsertLeave,BufEnter,BufWinEnter,TabEnter,BufWritePost *.rs :lua require'lsp_extensions'.inlay_hints{ prefix = ' Â» ', highlight = "NonText", enabled = {"TypeHint", "ChainingHint", "ParameterHint" } }
        ]], false)
      end

      if server == "vuels" then
        config.before_init = function(params)
          params.processId = vim.NIL
        end

        config.cmd = lspcontainers.command(server, container_runtime)
        config.root_dir = util.root_pattern(".git", vim.fn.getcwd())
      end
    end
    --local lspconfig = require("lspconfig")
    --lspconfig.init()
    local function on_attach(client, bufnr)
      local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end

      -- Mappings.
      local opts = { noremap=true, silent=true }

      -- See `:help vim.lsp.*` for documentation on any of the below functions
      buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
      buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
      buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
      buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
      buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
      buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
      buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)

      buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)

      buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)

      buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
      buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
      buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
      buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)

      buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)

      buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
      buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
      buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)

      -- Set some keybinds conditional on server capabilities
      if client.resolved_capabilities.document_formatting then
        buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
      end
      if client.resolved_capabilities.document_range_formatting then
        buf_set_keymap("v", "<space>f", "<cmd>lua vim.lsp.buf.range_formatting()<CR>", opts)
      end

      -- Set autocommands conditional on server_capabilities
      if client.resolved_capabilities.document_highlight then

        vim.api.nvim_exec([[
          augroup lsp_document_highlight
            autocmd! * <buffer>

            autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
            autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
          augroup END
        ]], false)
      end
    end

    -- config that activates keymaps and enables snippet support

    local function make_config()
      local capabilities = vim.lsp.protocol.make_client_capabilities()
      capabilities.textDocument.completion.completionItem.snippetSupport = true
      capabilities.textDocument.completion.completionItem.resolveSupport = {
        properties = {
          'documentation',
          'detail',
          'additionalTextEdits',
        }
      }


      return {
        -- enable snippet support
        capabilities = capabilities,
        -- map buffer local keybindings when the language server attaches
        on_attach = on_attach
      }
    end

    local function init()
      local lspconfig_servers = {
        "bashls",
        "cssls", -- tbi
        "dockerls",
        "gopls",
        "graphql", -- tbi
        "html",
        "jsonls", -- tbi
        "pylsp",
        --"sumneko_lua",
        "lua_ls",
        "tsserver",
        "yamlls",
        "omnisharp",
        "rust_analyzer",
        "vuels"
      }

      for _, server in pairs(lspconfig_servers) do
        local config = make_config()

        setup(config, server)

        require'lspconfig'[server].setup(config)
      end
    end
    init()
  end
}
